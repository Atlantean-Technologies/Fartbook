app Fartbook {
  wasp: {
    version: "^0.11.1"
  },
  title: "Fartbook",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    posts    Post[]
    payments Payment[]
psl=}

entity Post {=psl
    id      Int    @id @default(autoincrement())
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

entity Payment {=psl
    id     Int   @id @default(autoincrement())
    amount Float
    user   User  @relation(fields: [userId], references: [id])
    userId Int
psl=}

action createPost {
  fn: import { createPost } from "@server/actions.js",
  entities: [Post]
}

action createPayment {
  fn: import { createPayment } from "@server/actions.js",
  entities: [Payment]
}

query getPosts {
  fn: import { getPosts } from "@server/queries.js",
  entities: [Post]
}

query getPayments {
  fn: import { getPayments } from "@server/queries.js",
  entities: [Payment]
}

route HomePageRoute { path: "/", to: HomePage }
page HomePage {
  component: import { Home } from "@client/pages/Home.jsx",
  authRequired: false
}

route PaymentRoute { path: "/payment", to: PaymentPage }
page PaymentPage {
  component: import { Payment } from "@client/pages/Payment.jsx",
  authRequired: true
}